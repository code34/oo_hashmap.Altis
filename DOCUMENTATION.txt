	/*
	Author: code34 nicolas_boiteux@yahoo.fr
	Copyright (C) 2014 Nicolas BOITEUX

	CLASS OO_HASMAP OBJECT

	Interface reference
	http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>. 
	*/


/*
	check the interface reference webpage:
	http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html
*/

/*
	Function: _hashmap = ["new", []] call OO_HASHMAP;
	Create a new hasmap object

*/

/*
	Function : ["Put", [key, value]] call _hashmap;
	Associates the specified value with the specified key in this map.
*/

/*
	Function : _return = ["containsKey", key] call _hashmap;
	Returns true if this map contains a mapping for the specified key.
	Key must be an array
*/

/*
	Function: _return = ["containsValue", value] call _hashmap;
	Returns true if this map maps one or more keys to the specified value.
	Value must be an array
*/

/*
	Function: _return = "entrySet" call _hashmap;
	Returns a Set view of the mappings contained in this map.
*/

/*
	Function: _return = ["Get", key] call _hashmap;
	Returns the value to which the specified key is mapped, or "null" if this map contains no mapping for the key.
	Key must be an array
*/

/*
	Function: _return = "IsEmpty" call _hashmap;
	Returns true if this map contains no key-value mappings.
*/

/*
	Function: _return = "keySet" call _hashmap;
	Returns a Set view of the keys contained in this map.
*/

/*
	Function: _return = "Size" call _hashmap;
	Returns the number of key-value mappings in this map.
*/

/*
	Function: ["Set", [key, value]] call _hashmap;
	Set an existing key with value
*/

/*
	Function: ["Remove", key] call _hashmap;
	Removes the mapping for the specified key from this map if present.
	Key must be an array
*/

/*
	Function: "clear" call _hashmap;
	Removes all of the mappings from this map.
*/


